/*jshint camelcase: false */
/*global module:false */
'use strict';
module.exports = function(grunt) {

    grunt.initConfig({

        /*
            Uglify will, well, uglify the file generated by neuter.
        */
        uglify: {
            options: {
                compress: true
            },
            build: {
                src: 'build/app.js',
                dest: 'build/app.js'
            }
        },

        /* 
            A simple ordered concatenation strategy.
            This will start at app/app.js and begin
            adding dependencies in the correct order
            writing their string contents into
            'build/app.js'
        */
        neuter: {
            default_options: {
                files: {
                    'build/app.js': ['app/scripts/app.js']
                },
                options: {
                    filepathTransform: function(filepath){ return 'app/scripts/' + filepath; }
                }
            }
        },

        /*
            This command copies all the files from the app dir to their
            specific folders int the build dir
        */
        exec: {
            remove_build_dir: {
                command: 'rm -rf build; mkdir build',
            },
            copy_css: {
                command: 'mkdir build/css; cp app/lib/bootstrap/dist/css/* build/css/; cp app/css/* build/css/'
            },
            copy_fonts: {
                command: 'mkdir build/fonts; cp app/lib/bootstrap/dist/fonts/* build/fonts/'
            },
            copy_html: {
                command: 'cp app/index.html build/'
            }
        }
    });

    grunt.loadNpmTasks('grunt-exec');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-neuter');
  
    /*
        Default task - Copy files, neuter application code
        Prod task - Default + Uglify application code
    */
    grunt.registerTask('default', ['exec', 'neuter']);
    grunt.registerTask('prod', ['exec', 'neuter', 'uglify']);
};